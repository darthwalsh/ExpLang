<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{8897C0AF-8F9E-4423-8055-3D8DD48B77AE}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <RootNamespace>Engine</RootNamespace>
    <AssemblyName>Engine</AssemblyName>
    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <LangVersion>Latest</LangVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="PerCederberg.Grammatica, Version=1.6.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\Grammatica.1.6.0\lib\netstandard2.0\PerCederberg.Grammatica.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <PropertyGroup>
    <GrammaticaGenerated>obj\$(Configuration)\Generated</GrammaticaGenerated>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="Expression.cs" />
    <Compile Include="ExprExtractor.cs" />
    <Compile Include="$(GrammaticaGenerated)\ExpAnalyzer.cs" />
    <Compile Include="$(GrammaticaGenerated)\ExpConstants.cs" />
    <Compile Include="$(GrammaticaGenerated)\ExpParser.cs" />
    <Compile Include="$(GrammaticaGenerated)\ExpTokenizer.cs" />
    <Compile Include="Calculator.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
    <None Include="ExpLang.grammar" />
    <None Include="packages.config" />
    <None Include="..\README.md" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Target Name="BeforeBuild">
    <PropertyGroup>
      <GrammaticaURL>https://github.com/cederberg/grammatica/releases/download/v1.6/grammatica-1.6.zip</GrammaticaURL>
      <GrammaticaZip>$(IntermediateOutputPath)grammatica-1.6.zip</GrammaticaZip>
      <GrammaticaJar>$(IntermediateOutputPath)grammatica-1.6\lib\grammatica-1.6.jar</GrammaticaJar>
      <ExecNeeded>false</ExecNeeded>
      <ExecNeeded Condition="!Exists('$(GrammaticaGenerated)\ExpAnalyzer.cs') Or $([System.IO.File]::GetLastWriteTime('Engine.grammar').Ticks) &gt; $([System.IO.File]::GetLastWriteTime('$(GrammaticaGenerated)\ExpAnalyzer.cs').Ticks)">true</ExecNeeded>
    </PropertyGroup>
    
    <!-- If needed, download and extract grammatica-1.6.jar. Ignore error from first build, due to https://github.com/Microsoft/msbuild/issues/3884 -->
    <DownloadFile Condition="$(ExecNeeded) And !Exists($(GrammaticaZip)) And !Exists($(GrammaticaJar))" SourceUrl="$(GrammaticaURL)" DestinationFolder="$(IntermediateOutputPath)" />
    <Unzip Condition="$(ExecNeeded) And !Exists($(GrammaticaJar))" SourceFiles="$(GrammaticaZip)" DestinationFolder="$(IntermediateOutputPath)" OverwriteReadOnlyFiles="true" />
    <Exec Condition="$(ExecNeeded)" Command="java -jar &quot;$(GrammaticaJar)&quot; ExpLang.grammar --csoutput $(GrammaticaGenerated) --cspublic --csnamespace Engine.Generated --csclassname Exp" />
    
    <!-- Append to FileWrites so the file will be removed on clean -->
    <ItemGroup>
      <FileWrites Include="$(GrammaticaZip);$(GrammaticaJar);$(GrammaticaGenerated)\*"/>
    </ItemGroup>
  </Target>
</Project>